{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"addWhitelistAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"isWhitelistAdmin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"removeWhitelistAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"whitelistAdmins","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"vault/vendor/v0.6/RoleAd.sol":"RoleAd"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"vault/vendor/v0.6/AccessControl.sol":{"keccak256":"0x8d4f25c969a29ed3879348ca61f919d61b25ad3e10440189ab60529dbee25c57","license":"MIT","urls":["bzz-raw://2bda9d25830715592bf0a5832941bcb89c6e800cf07a565272109bfd2f083ee3","dweb:/ipfs/QmS1F2ehWHdUscSXf15Ydbewwvf3nUMPAmv2PiNDSDGVRh"]},"vault/vendor/v0.6/Address.sol":{"keccak256":"0x8324cfffee1e50ff439a343c57d91531288dc4f372972f2596e4e5580e0d1555","license":"agpl-3.0","urls":["bzz-raw://0fdfbdac1836fd2e7efa5dbb0798b01e7c4e9e6a5db0c7df1b4e3ccb0208aa7d","dweb:/ipfs/QmVYrxGojviiVk9AoHWe2Vc9Qt5hCDjFFxi6dRuRCoZMKr"]},"vault/vendor/v0.6/Context.sol":{"keccak256":"0x74d9ce9690018dc1a2e1f9c832c9cec0ba851de393a55e2f25c83322742b4fb9","license":"agpl-3.0","urls":["bzz-raw://bbfd35482a3414dfdfc62f927711a2de97838cfade2419c47e6efeee8598ed64","dweb:/ipfs/QmZTUKLVrtV1Tymd3qvXj2zsSVsKejwtXnHAPWAmx6irAG"]},"vault/vendor/v0.6/EnumerableSet.sol":{"keccak256":"0x1492927e67a948a4ead8381ced75abddfcb81aad176b2b29ed96cb368defad7d","license":"MIT","urls":["bzz-raw://1070ea12ad42542d581e7f64ca69109583b4df0f55e2905431797a64f35a0130","dweb:/ipfs/QmV2accXPmm487CHBcCT3ioyB51CnBm6jMS6dAHegQcVgQ"]},"vault/vendor/v0.6/Ownable.sol":{"keccak256":"0xbfcfaaa0f6a6299b7371b50aad65768a66cd397a6c998a639c7394afc44405a1","license":"MIT","urls":["bzz-raw://befb725565cb402064292fa546356aaacd15fcb1ff598f3aef11cd00b0dd9967","dweb:/ipfs/Qmb6y7VmrgPctp4nDC5YzqzzBoBkM1AgPReqAGLN3Ay3A8"]},"vault/vendor/v0.6/RoleAd.sol":{"keccak256":"0xed07409f898b86b502a7f423d3a117b64e66c61b60e302954db67f80e28fea5c","license":"MIT","urls":["bzz-raw://327e245e3deab4b329dd759eb13932b1f647471b95011d28f21d34dfe0918831","dweb:/ipfs/QmZA2fASD7RJ11afdsEQGNyhnjorXzBM6D5gyPaq1bYpEL"]}},"version":1}