{"compiler":{"version":"0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"vault/vendor/v0.6/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"istanbul","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"vault/vendor/v0.6/ReentrancyGuard.sol":{"keccak256":"0x22baff54a91ad5055f6667ccc45adf75051fcd1c6c3faa2dd699d22f73dd99a6","license":"MIT","urls":["bzz-raw://7e807eac8abcb37de7e9b2063153eef25f525687588c36986c7ea49b64c01f5f","dweb:/ipfs/QmanVzjwQHRcQyCjvAcSUuBuNcEr6uEbKKkQCKsQfpjzGx"]}},"version":1}